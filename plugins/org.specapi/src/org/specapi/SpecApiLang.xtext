grammar org.specapi.SpecApiLang hidden(WS, SL_COMMENT, ANY_OTHER, ML_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate specapiLang "http://www.specapi.org/specapi/SpecApiLang"

SpecApiDocument:
	"package" packageName=QualifiedName
	(declarations+=Declaration)*
;

Declaration:
	UserTypeDeclaration | Api
;

Api:
	'api' name=ID baseUrl=URL? '{'
		blocks+=ServiceBlock*
	'}'
;

ServiceBlock:
	HeaderBlock | ParamsBlock | HttpMethod
;

HeaderBlock:
	{HeaderBlock}
	'headers' headers+=Member (',' headers+=Member)*
;

HttpMethod:
	type=HttpMethodType name=ID path=Path? '{' 
		blocks += HttpMethodBlock*
	'}'
;

HttpMethodBlock:
	HeaderBlock | ParamsBlock | RequestBlock | ResponseBlock
;

enum HttpMethodType:
	get | put | post | delete | patch
;

Path:
	{Path}
	'/' (ArbitraryPathSegment|params+=Member) ('/' (ArbitraryPathSegment|params+=Member))*
;


ArbitraryPathSegment:
	QualifiedName ("-" QualifiedName)*
;

ParamsBlock:
	{ParamsBlock}
	'params' params+=Member (',' params+=Member)*
;

Literal:
	{BooleanLiteral} literal=BooleanValue |
	{StringLiteral} literal=STRING |
	{NumericLiteral} literal=SignedNumber
;

RequestBlock:
	'request' type=BlockType
;

ResponseBlock:
	{ResponseBlock}
	'response' code=INTEGER? message=STRING? (type=BlockType)?
;

BlockType:
	Type | ComplexTypeLiteral
;

Member:
	name=(ID|STRING) ':' type=Type ("=" defaultValue=Literal)?
;

Type:
	UserType | IntrinsicType | ArrayType /* | DictionaryType */
;

ArrayType:
	elementType=(UserType|IntrinsicType) id='[]'
;

//DictionaryType:
//	elementType=(UserType|IntrinsicType) id='#'
//;

UserType:
	declaration = [UserTypeDeclaration] 
;

UserTypeDeclaration:
	ComplexTypeDeclaration | EnumTypeDeclaration
;

ComplexTypeDeclaration:
	keyword='entity' name=ID (literal=ComplexTypeLiteral)?
;

EnumTypeDeclaration:
	keyword='enum' name=ID ('extends' superType=IntegerType)? (literal=EnumTypeLiteral)?
;

EnumTypeLiteral:
	('{' members+=EnumMember (',' members+=EnumMember)* '}')
;

EnumMember:
	name=ID (assignment?='=' value=NUMBER)?
;

ComplexTypeLiteral:
	('{' members+=Member (',' members+=Member)* '}')
;

IntrinsicType:
	StringType | BooleanType | NumericType
;

StringType:
	id="string"
;

BooleanType:
	id="boolean"
;

NumericType:
	IntegerType | LongType | DoubleType
;
	
IntegerType:
	id="int"
;

LongType:
	id="long"
;

DoubleType:
	id="double"
;

QualifiedName:
	ID ("." ID)*;
	
enum BooleanValue:
	true|false
;

SignedNumber returns ecore::EBigDecimal:
'-'?NUMBER
;	

terminal NUMBER returns ecore::EBigDecimal:
	INTEGER ('.' INTEGER);

terminal INTEGER returns ecore::EInt:
	('0'..'9')*
;

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

terminal URL: ('http'|'https')':''//'!(' '|'{')*;

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;