/*
* generated by Xtext
*/
package org.specapi.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.specapi.SpecApiModelUtils
import org.specapi.specapiLang.Api
import org.specapi.specapiLang.ComplexTypeDeclaration
import org.specapi.specapiLang.EnumMember
import org.specapi.specapiLang.EnumTypeDeclaration
import org.specapi.specapiLang.HeaderBlock
import org.specapi.specapiLang.HttpMethod
import org.specapi.specapiLang.Member
import org.specapi.specapiLang.SpecApiDocument
import org.specapi.specapiLang.Type
import org.specapi.specapiLang.ResponseBlock
import org.specapi.specapiLang.ComplexTypeLiteral
import org.specapi.specapiLang.ParamsBlock
import org.specapi.specapiLang.RequestBlock
import org.specapi.specapiLang.BlockType

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class SpecApiLangLabelProvider extends DefaultEObjectLabelProvider {

	@Inject extension SpecApiModelUtils modelUtil
	
	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
    def image(SpecApiDocument ele) {
        return "package.gif";
    }
    
    def image(ComplexTypeDeclaration ele) {
        return "entity_obj.gif";
    }
    
    def image(EnumTypeDeclaration ele) {
        return "enum_obj.gif";
    }
    
    def image(Member ele) {
    	if(ele.eContainer instanceof ParamsBlock) {
    		return "query_param.gif"
    	}
        return "member_obj.gif";
    }
    
    def image(EnumMember ele) {
        return "member_obj.gif";
    }
    
    def image(HttpMethod ele) {
        return "httpmethod_obj.gif";
    }
    
    def image(RequestBlock ele) {
        return "request.gif";
    }
    
    def image(Api ele) {
        return "api_obj.gif";
    }
    
    def text(Member ele) {
        return ele.getName() + " : " + ele.type.signature;
    }
    
    def text(HttpMethod ele) {
        var name = ele.getName();
        
        name = name.concat(" " + ele.getPathAsFormatString("{", "}"))
        
        return name
    }
    
    def text(ResponseBlock block) {
    	return block.responseLine + " : " + getBlockTypeLabel(block.type);
    }
    
    def text(RequestBlock block) {
    	return getBlockTypeLabel(block.type);
    }
    
    def image(ResponseBlock block) {
    	var code = block.code
    	if(code == 0 || code >=200 && code <=299) {
    		return "response_ok.gif"
    	} else if((code > 0 && code <= 99) || (code >=300 && code <=399)) {
    		return "response_info.gif"
    	} else {
    		return "response_error.gif"
    	}
    }
	
	def getBlockTypeLabel(BlockType type) {
		if(type instanceof ComplexTypeLiteral) {
			return "{..}"
		} else {
			return (type as Type).signature
		}
	}
    
    def text (HeaderBlock ele) {
        return "headers";
    }
}
