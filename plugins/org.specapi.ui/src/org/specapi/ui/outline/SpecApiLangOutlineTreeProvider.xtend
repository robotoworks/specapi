/*
* generated by Xtext
*/
package org.specapi.ui.outline

import org.specapi.specapiLang.Member
import org.specapi.specapiLang.HttpMethod
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.specapi.specapiLang.ComplexTypeDeclaration
import org.eclipse.emf.ecore.EObject
import org.specapi.specapiLang.EnumTypeDeclaration
import org.specapi.specapiLang.Path
import org.specapi.specapiLang.ResponseBlock
import org.specapi.specapiLang.ParamsBlock
import org.specapi.specapiLang.RequestBlock

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class SpecApiLangOutlineTreeProvider extends org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider {
    def _isLeaf(Member modelElement) {
        return true;
    }
    
    def _isLeaf(Path modelElement) {
        return true;
    }

    def _isLeaf(ResponseBlock modelElement) {
        return true;
    }
    def _isLeaf(RequestBlock modelElement) {
        return true;
    }
    
    def _createChildren(IOutlineNode parent, HttpMethod element) {
        for (ParamsBlock params : element.blocks.filter(typeof(ParamsBlock))) {
        	for(Member param : params.params) {
            	createNode(parent, param);
            }
        }
        for (EObject obj : element.blocks.filter[!(it instanceof ParamsBlock)]) {
			createNode(parent, obj);
        }
    }
    
    def _createChildren(IOutlineNode parent, ComplexTypeDeclaration element) {
        for (EObject childElement : element.getLiteral().getMembers())
            createNode(parent, childElement);
    }
    
    def _createChildren(IOutlineNode parent, EnumTypeDeclaration element) {
        for (EObject childElement : element.getLiteral().getMembers())
            createNode(parent, childElement);
    }	
}
